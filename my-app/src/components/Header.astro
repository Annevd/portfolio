---
import DarkLightMode from "./icons/DarkLightMode.astro"
import MenuArrow from "./icons/MenuArrow.astro"

const pathname = new URL(Astro.request.url).pathname;
const currentPath = pathname.slice(1);
---
<header class="header">
    <a href="/" class="header__logo caps">AVD</a>
    <div class="header__right">
      <div class="header__buttons">
        <button class="header__theme-trigger"><DarkLightMode size="max(2rem, 3vw)"/></button>
        <button class="header__menu-trigger"><MenuArrow size="3rem"/></button>
      </div>
      <nav class="header__nav">
          <ul class="header__list">
              <li><a href="/archive" class={`header__link caps ${currentPath === "archive" ? "active" : ""}`}>Archive</a></li>
              <li><a href="/blog" class={`header__link caps ${currentPath === "blog" ? "active" : ""}`}>We love web</a></li>
              <li><a href="/gallery" class={`header__link caps ${currentPath === "gallery" ? "active" : ""}`}>Gallery</a></li>
              <li><a href="/about" class={`header__link caps ${currentPath === "about" ? "active" : ""}`}>About</a></li>
          </ul>
      </nav>
    </div>
</header>

<style>

.header {
  position: sticky;
  top: 0;
  left: 0;
  width: 100%;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--spacing-border) var(--spacing-border) var(--spacing) var(--spacing-border);
  background: var(--background-color);
}

.header__logo {
  font-family: var(--regular-font-thin);
  font-variation-settings: var(--regular-font-width);
  font-size: max(2rem, 2vw);
}

.header__buttons {
  display: flex;
  align-items: center;
  gap: var(--gap);
}

.header__menu-trigger {
  cursor: pointer;
  transition: transform 0.3s;
}

.header__nav {
  display: flex;
  justify-content: flex-start;
  align-items: center;
  position: absolute;
  top: var(--header-height);
  left: 0;
  right: 0;
  background: var(--background-color);
  min-height: calc(100lvh - var( --header-height) - var(--spacing-border));
  margin: var(--spacing-border);
  /* padding-bottom:  var(--header-height); */
  transform: translateX(-100%);
  transition: transform 0.3s;
  clip-path: inset(0 0 100% 0);
  transition: clip-path 0.5s cubic-bezier(0.76, 0, 0.24, 1), transform 0s 0.5s;
}

.header__list {
  display: flex;
  flex-direction: column;
  justify-self: center;
  gap: calc(var(--gap) * 2);
}

.header__link {
    font-family: var(--statement-font);
    font-variation-settings: var(--statement-font-width);
    font-size: max(3.5rem, 2vw);
}

.header__link.active {
  text-decoration: underline;
}

.is-rotating {
  transform: rotate(180deg);
  transition: transform 0.3s;
}

.is-open {
  transform: translateX(0);
  clip-path: inset(0 0 0 0);
  transition: clip-path 0.5s cubic-bezier(0.76, 0, 0.24, 1);
}

@media (width > 768px) {
  .header {
    background: none;
  }

  .header__logo {
    font-size: max(1.5rem, 2vw)
  }

  .header__right {
    display: flex;
    gap: var(--gap);
    align-items: center;
  }

  .header__menu-trigger {
    display: none;
  }

  .header__nav {
    position: relative;
    transform: none;
    top: unset;
    left: unset;
    right: unset;
    background: none;
    min-height: auto;
    padding: unset;
    padding-bottom: unset;
    transition: unset;
    clip-path: none;
  }

  .header__list {
    flex-direction: row;
    gap: var(--gap);
  }

  .header__link {
    font-family: var(--regular-font-thin);
    font-size: max(1.5rem, 2vw);
  }
}

</style>

<script>

  const menuTrigger = document.querySelector('.header__menu-trigger')
  const menu = document.querySelector('.header__nav')

  menuTrigger?.addEventListener('click', () => {
    menu?.classList.toggle('is-open');
    menuTrigger?.classList.toggle('is-rotating');
  })

  const themeTrigger = document.querySelector('.header__theme-trigger')
  const body = document.body
  const savedTheme = localStorage.getItem("theme");

  if (savedTheme) {
    body.classList.add(savedTheme);
  }

  themeTrigger?.addEventListener("click", () => {
  if (body.classList.contains("dark-mode")) {
    body.classList.remove("dark-mode");
    body.classList.add("light-mode");
    localStorage.setItem("theme", "light-mode");
  } else {
    body.classList.remove("light-mode");
    body.classList.add("dark-mode");
    localStorage.setItem("theme", "dark-mode");
  }
});

document.addEventListener('DOMContentLoaded', () => {
  const header = document.querySelector('.header');
  
  // Calculate the height of the header
  const headerHeight = header ? (header as HTMLElement).offsetHeight : 0;

  // Set the header height as a CSS custom property in the :root element
  document.documentElement.style.setProperty('--header-height', `${headerHeight}px`);
});


</script>